{"version":3,"sources":["components/Header/Header.js","components/Form/Form.js","components/UserTime/Usertime.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","tabIndex","href","onClick","this","clicked","Component","Form","props","action","onSubmit","handleSubmit","type","name","id","onChange","handleDate","value","date","required","min","max","handleSunrise","htmlFor","handleDuration","duration","Usertime","nightOrDay","userTime","resetPage","aria-hidden","title","App","event","beforeSunrise","target","setState","toggleForm","showForm","state","preventDefault","axios","url","method","responseType","params","lat","lng","then","response","apiTimes","data","results","createRun","dateConverter","split","map","parseInt","sunriseTimeConverter","sunriseStringOne","sunrise","seconds","pop","concat","sRiseTimes","sunsetTimeConverter","sunsetStringOne","sunset","secondsTwo","sunsetTimes","convertTimeFormat","formattedTime","timeToConvert","newHour","shift","unshift","timeToEst","easternTime","window","location","reload","dateArray","sunriseTimeArray","sunsetTimeArray","formattedSunsetArray","sunsetDateArray","sunriseDateArray","convertedToSunsetEst","convertedToSunriseEst","sunsetDateArrayFinal","sunriseDateArrayFinal","sunsetDateObject","Date","sunriseDateObject","runDuration","morningRun","setMinutes","getMinutes","nightRun","morningRunString","toTimeString","nightRunString","finalMorningString","slice","finalNightString","userRun","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.889999da.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component {\n     \n    render() {\n        return (\n            <header>\n                <div className=\"headerContainer\">\n                    <div className=\"headerContent\">\n                        <h1>Twilight Me</h1>\n                    </div>\n                    <div className=\"infoButton dropdown\" tabIndex=\"0\">\n                        <i className=\"fas fa-info-circle\" tabIndex=\"0\"></i>\n                        <div className=\"dropdownContent\" tabIndex=\"0\">\n                            <p>You can define twilight simply as the time of day between daylight and darkness, whether that's after sunset, or before sunrise. It's a time when the light from the sky appears diffused and often pinkish.</p>\n                            <p> You want to experience this on your run! Let us twilight you: click on \"go run!\" below.</p>\n                        </div>\n                    </div>\n                    <a href=\"#form\" className=\"goRun btn\" onClick={this.clicked}>go run!</a>\n                </div>\n            </header>\n        );\n    }\n}\n\nexport default Header;","import React from 'react'\n\nfunction Form(props) {\n  return (\n    <form action=\"\" onSubmit={props.handleSubmit}>\n      <h3>When would you like to run?</h3>\n      <div className=\"formParent\">\n        <div className=\"dateParent\">\n          <input\n            type=\"date\"\n            name=\"date\"\n            id=\"date\"\n            onChange={props.handleDate}\n            value={props.date}\n            required\n            min=\"1980-01-02\"\n            max=\"2040-01-02\"\n          />\n        </div>\n        <div className=\"radioParent\">\n          <input\n            type=\"radio\"\n            id=\"beforeSunrise\"\n            name=\"beforeSunrise\"\n            value='true'\n            onChange={props.handleSunrise}\n          />\n          <label htmlFor=\"beforeSunrise\">Before Sunrise</label>\n\n          <input\n            type=\"radio\"\n            id=\"beforeSunset\"\n            name=\"beforeSunrise\"\n            value='false'\n            onChange={props.handleSunrise}\n            required\n          />\n          <label htmlFor=\"beforeSunset\">Before Sunset</label>\n        </div>\n\n        <select onChange={props.handleDuration} value={props.duration} required>\n          <option value=\"\">Run Duration</option>\n          <option value=\"15\">15 Minutes</option>\n          <option value=\"30\">30 Minutes</option>\n          <option value=\"45\">45 Minutes</option>\n          <option value=\"60\">60 Minutes</option>\n        </select>\n        <button type=\"submit\" className=\"submit\" className=\"submit btn\">Twilight Me</button>\n      </div>\n    </form>\n  );\n}\n\nexport default Form;","import React from \"react\";\n\nconst Usertime = (props) => {\n  return (\n    <section className={props.nightOrDay ? \"resultsSectionMorning\" : \"resultsSectionNight\"}>\n      <div className=\"container resultsInfo\">\n        <p className=\"resultsBlurb\">{props.nightOrDay ? \"Here is your morning run! Enjoy the sunrise.\" : \"Here is your night run! Enjoy the sunset.\"}</p>\n        <h3 className={props.nightOrDay ? \"resultsMorning\" : \"resultsNight\"}>{props.userTime}</h3>\n        <button className=\"reset\" onClick={props.resetPage}>\n          <i className=\"fas fa-sync-alt\" aria-hidden=\"true\" title=\"refresh page\"></i>\n        </button>\n      </div>\n    </section>\n  );\n}\n\nexport default Usertime;\n","import React, { Component } from 'react';\nimport axios from 'axios'\n\n// import components\nimport Header from './components/Header/Header'\nimport Form from './components/Form/Form';\nimport Usertime from './components/UserTime/Usertime';\n\nimport './styles/App.scss'\n\n// First, we get the date for the user of when they would like to run.\n// Then, we ask if they'd like to hit the sunrise or the sunset. \n// From there we save the values for the time that either the sunrise ends or sunset ends, depending on the user selection. \n// Then, we ask them for the desired duration of their run and save that value. \n// Then, we subtract that duration from either the sunrise or sunset time (depending on what they chose) to figure out when they should leave to go on their run.\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      apiTimes: [], \n      beforeSunrise: null,\n      date: '',\n      duration: 0,\n      userTime:[],\n      morningRun: '',\n      nightRun: '',\n      showForm: true\n    }\n  }\n\n  handleSunrise = (event) => {\n    const beforeSunrise = event.target.value === 'true' ? true : false;\n    this.setState({\n      beforeSunrise\n    })\n  }\n\n  handleDate = (event) => {\n    this.setState({\n      date: event.target.value,\n    })\n  }\n\n  handleDuration = (event) => {\n    this.setState({\n      duration: event.target.value,\n    })\n  }\n\n  // to remove and show form after selection\n  toggleForm = () => {\n    this.setState({\n      showForm: !this.state.showForm\n    })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.toggleForm();\n    axios({\n      url: `https://api.sunrise-sunset.org/json`,\n      method: `GET`,\n      responseType: `json`,\n      params: {\n        lat: 43.6532,\n        lng: -79.3832,\n        date: this.state.date,\n        \n      }\n    })\n      .then((response) => {\n        this.setState({\n          apiTimes: response.data.results\n        },() => this.createRun() )\n        // anon function above delays createRun until api is finished\n      });\n  }\n\n  //split into three functions and pass the params to the createRun\n  dateConverter = (date) => {\n  // converts user selected date into number values\n    const dateString = date.split(\"-\", 3)\n    //map to new array\n    return dateString.map((date) => {\n      return parseInt(date)\n    })\n  }\n   // converts sunrise time\n  sunriseTimeConverter = () => {\n    // converts the sunrise time from API - from string to number values\n    const sunriseStringOne = this.state.apiTimes.sunrise.split(':', 3)\n    const seconds = sunriseStringOne[2].split(\" \", 1)\n    const sunriseStringThree = sunriseStringOne.pop()\n    // concat the two arrays together with out AM/PM values\n    const finalSunriseString = sunriseStringOne.concat(seconds)\n    // convert array into number values\n    const finalSunriseNumber = finalSunriseString.map((sRiseTimes) => {\n      return parseInt(sRiseTimes)\n    })\n    return finalSunriseNumber\n  }\n\n  // convert sunset time\n  sunsetTimeConverter = () => {\n    // coverts sunset time into number values\n    const sunsetStringOne = this.state.apiTimes.sunset.split(':', 3)\n    const secondsTwo = sunsetStringOne[2].split(\" \", 1)\n    const sunsetStringThree = sunsetStringOne.pop()\n    // concat the two arrays together with out AM/PM values\n    const finalSunsetString = sunsetStringOne.concat(secondsTwo)\n    // convert array into number values\n    const finalSunsetNumber = finalSunsetString.map((sunsetTimes) => {\n      return parseInt(sunsetTimes)\n    })\n    return finalSunsetNumber;\n  }\n\n  // this converts the sunrise time to 24 hour time\n  convertTimeFormat = (formattedTime) => {\n    const timeToConvert = [...formattedTime]\n\n    if (timeToConvert[0] === 12) {\n      const newHour = timeToConvert[0] - 12\n      const newTimeToConvert = timeToConvert.shift()\n      const formattedTimeAgain = timeToConvert.unshift(newHour)\n\n    } else {\n      const sameHour = timeToConvert[0] - 0\n    }\n    //returns to the function in createRun\n    return timeToConvert;\n  }\n\n  //this converts the sunset time to EST time\n  timeToEst = (easternTime) => {\n    \n    if (easternTime[3] >= 5) {\n      return easternTime[3] - 4\n    } else {\n      return easternTime[3] + 20\n    }\n  }\n\n  resetPage = () => {\n    window.location.reload()\n  }\n\n  // creates user run\n  createRun = () => {\n    // this is the value returned from timeConverter\n    const dateArray = this.dateConverter(this.state.date)\n    // this the value returned from the sunriseTimeConverter\n    const sunriseTimeArray = this.sunriseTimeConverter()\n    const sunsetTimeArray = this.sunsetTimeConverter()\n    \n    const formattedSunsetArray = this.convertTimeFormat(sunsetTimeArray)\n\n    const sunsetDateArray = dateArray.concat(formattedSunsetArray)\n    const sunriseDateArray = dateArray.concat(sunriseTimeArray);\n\n    const convertedToSunsetEst = this.timeToEst(sunsetDateArray)\n    const convertedToSunriseEst = this.timeToEst(sunriseDateArray)\n\n    const sunsetDateArrayFinal = [...sunsetDateArray]\n    sunsetDateArrayFinal[3] = convertedToSunsetEst;\n\n    const sunriseDateArrayFinal = [...sunriseDateArray]\n    sunriseDateArrayFinal[3] = convertedToSunriseEst;\n\n    const sunsetDateObject = new Date(...sunsetDateArrayFinal);\n\n    const sunriseDateObject = new Date(...sunriseDateArrayFinal)\n    \n    const runDuration = parseInt(this.state.duration);\n\n      // set variables for Sunset and Sunrise times\n    let morningRun = sunriseDateObject;\n    morningRun.setMinutes(morningRun.getMinutes()-runDuration)\n\n    let nightRun = sunsetDateObject;\n    nightRun.setMinutes(nightRun.getMinutes()-runDuration)\n\n    const morningRunString = morningRun.toTimeString()\n\n    const nightRunString = nightRun.toTimeString()\n\n    const finalMorningString = morningRunString.slice(0,8)\n\n    const finalNightString = nightRunString.slice(0,8)\n\n    const userRun = this.state.beforeSunrise ? finalMorningString : finalNightString\n\n// setting state with new string\n      this.setState({\n        userTime: userRun\n      })\n    }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <section className=\"formSection\" id=\"form\">\n          <div>   \n        {this.state.showForm ?\n          <Form \n            handleSubmit={this.handleSubmit}\n            handleSunrise={this.handleSunrise}\n            handleDate={this.handleDate}\n            date={this.state.date}\n            handleDuration={this.handleDuration}\n            duration={this.state.duration}\n            beforeSunrise={this.state.beforeSunrise}\n            />\n              : <Usertime \n              userTime={this.state.userTime}\n              resetPage={this.resetPage}\n              nightOrDay={this.state.beforeSunrise} />\n            }\n            </div>\n          </section>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}