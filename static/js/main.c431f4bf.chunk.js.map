{"version":3,"sources":["Form.js","Usertime.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","action","onSubmit","handleSubmit","type","name","id","onChange","handleDate","value","date","htmlFor","handleSunrise","handleDuration","duration","Usertime","console","log","userTime","App","event","beforeSunrise","target","setState","preventDefault","axios","url","method","responseType","params","lat","lng","state","then","response","apiTimes","data","results","createRun","dateConverter","split","map","parseInt","sunriseTimeConverter","sunriseStringOne","sunrise","seconds","pop","concat","sRiseTimes","sunsetTimeConverter","sunsetStringOne","sunset","secondsTwo","sunsetTimes","convertTimeFormat","formattedTime","timeToConvert","newHour","shift","unshift","timeToEst","easternTime","dateArray","sunriseTimeArray","sunsetTimeArray","formattedSunsetArray","sunsetDateArray","sunriseDateArray","convertedToSunsetEst","convertedToSunriseEst","sunsetDateArrayFinal","sunriseDateArrayFinal","sunsetDateObject","Date","sunriseDateObject","runDuration","morningRun","setMinutes","getMinutes","nightRun","morningRunString","toTimeString","nightRunString","finalMorningString","slice","finalNightString","userRun","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wPAoDeA,MAhDP,SAAeC,GACX,OACE,0BAAMC,OAAO,GAAGC,SAAUF,EAAMG,cAC9B,2DAEA,2BACEC,KAAK,OACLC,KAAK,OACLC,GAAG,OACHC,SAAUP,EAAMQ,WAChBC,MAAOT,EAAMU,OAEf,2BAAOC,QAAQ,SACf,2BACEP,KAAK,QACLE,GAAG,gBACHD,KAAK,gBACLI,MAAM,OACNF,SAAUP,EAAMY,gBAElB,2BAAOD,QAAQ,iBAAf,kBAEA,2BACEP,KAAK,QACLE,GAAG,eACHD,KAAK,gBACLI,MAAM,QACNF,SAAUP,EAAMY,gBAElB,2BAAOD,QAAQ,gBAAf,iBAIA,4BAAQJ,SAAUP,EAAMa,eAAgBJ,MAAOT,EAAMc,UACnD,4BAAQL,MAAM,IAAd,gBACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,YAEF,6BACE,4BAAQL,KAAK,UAAb,kBClCHW,EATE,SAACf,GAEhB,OADAgB,QAAQC,IAAIjB,GAEV,8BACC,4BAAKA,EAAMkB,YCoODC,E,kDA3Nb,aAAe,IAAD,8BACZ,gBAYFP,cAAgB,SAACQ,GACf,IAAMC,EAAuC,SAAvBD,EAAME,OAAOb,MACnC,EAAKc,SAAS,CACZF,mBAhBU,EAoBdb,WAAa,SAACY,GACZ,EAAKG,SAAS,CACZb,KAAMU,EAAME,OAAOb,SAtBT,EA0BdI,eAAiB,SAACO,GAChB,EAAKG,SAAS,CACZT,SAAUM,EAAME,OAAOb,SA5Bb,EAiCdN,aAAe,SAACiB,GACdA,EAAMI,iBACNC,IAAM,CACJC,IAAI,sCACJC,OAAO,MACPC,aAAa,OACbC,OAAQ,CACNC,IAAK,QACLC,KAAM,QACNrB,KAAM,EAAKsB,MAAMtB,QAIlBuB,MAAK,SAACC,GACL,EAAKX,SAAS,CACZY,SAAUD,EAASE,KAAKC,UACxB,kBAAM,EAAKC,mBAjDL,EAuDdC,cAAgB,SAAC7B,GAIf,OAFmBA,EAAK8B,MAAM,IAAK,GAEjBC,KAAI,SAAC/B,GACrB,OAAOgC,SAAShC,OA5DN,EAgEdiC,qBAAuB,WAErB,IAAMC,EAAmB,EAAKZ,MAAMG,SAASU,QAAQL,MAAM,IAAK,GAC1DM,EAAUF,EAAiB,GAAGJ,MAAM,IAAK,GACpBI,EAAiBG,MAO5C,OAL2BH,EAAiBI,OAAOF,GAELL,KAAI,SAACQ,GACjD,OAAOP,SAASO,OAzEN,EA+EdC,oBAAsB,WAEpB,IAAMC,EAAkB,EAAKnB,MAAMG,SAASiB,OAAOZ,MAAM,IAAK,GACxDa,EAAaF,EAAgB,GAAGX,MAAM,IAAK,GACvBW,EAAgBJ,MAO1C,OAL0BI,EAAgBH,OAAOK,GAELZ,KAAI,SAACa,GAC/C,OAAOZ,SAASY,OAxFN,EA8FdC,kBAAoB,SAACC,GACnB,IAAMC,EAAa,YAAOD,GAE1B,GAAyB,KAArBC,EAAc,GAEhB,KAAMC,EAAUD,EAAc,GAAK,GACVA,EAAcE,QAEZF,EAAcG,QAAQF,QAGhCD,EAAc,GAGjC,OAAOA,GA5GK,EAiHdI,UAAY,SAACC,GAEX,OAAIA,EAAY,IAAM,EACbA,EAAY,GAAK,EAEjBA,EAAY,GAAK,IAtHd,EA+HdxB,UAAY,WAEV,IAAMyB,EAAY,EAAKxB,cAAc,EAAKP,MAAMtB,MAG1CsD,EAAmB,EAAKrB,uBAGxBsB,EAAkB,EAAKf,sBAGvBgB,EAAuB,EAAKX,kBAAkBU,GAE9CE,EAAkBJ,EAAUf,OAAOkB,GACnCE,EAAmBL,EAAUf,OAAOgB,GAGpCK,EAAuB,EAAKR,UAAUM,GACtCG,EAAwB,EAAKT,UAAUO,GAKvCG,EAAoB,YAAOJ,GACjCI,EAAqB,GAAKF,EAG1B,IAAMG,EAAqB,YAAOJ,GAClCI,EAAsB,GAAKF,EAG3B,IAAMG,EAAgB,YAAOC,KAAP,YAAeH,IACrCvD,QAAQC,IAAI,CAACwD,qBAEb,IAAME,EAAiB,YAAOD,KAAP,YAAeF,IACtCxD,QAAQC,IAAI,CAAC0D,sBAEb,IAAMC,EAAclC,SAAS,EAAKV,MAAMlB,UAGpC+D,EAAaF,EACjBE,EAAWC,WAAWD,EAAWE,aAAaH,GAC9C5D,QAAQC,IAAI4D,GAEZ,IAAIG,EAAWP,EACfO,EAASF,WAAWE,EAASD,aAAaH,GAE1C,IAAMK,EAAmBJ,EAAWK,eACpClE,QAAQC,IAAIgE,GAEZ,IAAME,EAAiBH,EAASE,eAChClE,QAAQC,IAAIkE,GAEZ,IAAMC,EAAqBH,EAAiBI,MAAM,EAAE,GACpDrE,QAAQC,IAAImE,GAEZ,IAAME,EAAmBH,EAAeE,MAAM,EAAE,GAEhDrE,QAAQC,IAAIqE,GAGZ,IAAMC,EAAU,EAAKvD,MAAMX,cAAgB+D,EAAqBE,EAM9D,EAAK/D,SAAS,CACZL,SAAUqE,KAjMd,EAAKvD,MAAQ,CACXG,SAAU,GACVd,cAAe,KACfX,KAAM,GACNI,SAAU,EACVI,SAAS,GACT2D,WAAY,GACZG,SAAU,IATA,E,qDAyMZ,OACE,8BACE,uCACA,kBAAC,EAAD,CACE7E,aAAcqF,KAAKrF,aACnBS,cAAe4E,KAAK5E,cACpBJ,WAAYgF,KAAKhF,WACjBE,KAAM8E,KAAKxD,MAAMtB,KACjBG,eAAgB2E,KAAK3E,eACrBC,SAAU0E,KAAKxD,MAAMlB,SACrBO,cAAemE,KAAKxD,MAAMX,gBAE5B,kBAAC,EAAD,CAAUH,SAAUsE,KAAKxD,MAAMd,gB,GAtNrBuE,aCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrE,MAAK,SAAAsE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1F,QAAQ0F,MAAMA,EAAMC,c","file":"static/js/main.c431f4bf.chunk.js","sourcesContent":["import React from 'react'\n\n\n\n        function Form (props){    \n            return (\n              <form action=\"\" onSubmit={props.handleSubmit}>\n                <h3>when would you like to run?</h3>\n\n                <input\n                  type=\"date\"\n                  name=\"date\"\n                  id=\"date\"\n                  onChange={props.handleDate}\n                  value={props.date}\n                />\n                <label htmlFor=\"date\"></label>\n                <input\n                  type=\"radio\"\n                  id=\"beforeSunrise\"\n                  name=\"beforeSunrise\"\n                  value='true'\n                  onChange={props.handleSunrise}\n                />\n                <label htmlFor=\"beforeSunrise\">before sunrise</label>\n\n                <input\n                  type=\"radio\"\n                  id=\"beforeSunset\"\n                  name=\"beforeSunrise\"\n                  value='false'\n                  onChange={props.handleSunrise}\n                />\n                <label htmlFor=\"beforeSunset\">before sunset</label>\n\n                {/* consider error handling - min and max */}\n\n                <select onChange={props.handleDuration} value={props.duration}>\n                  <option value=\"\">run duration</option>\n                  <option value=\"15\">15 mins</option>\n                  <option value=\"30\">30 mins</option>\n                  <option value=\"45\">45 mins</option>\n                  <option value=\"60\">60 mins</option>\n                </select>\n                <div>\n                  <button type=\"submit\">twilight me</button> \n                  {/* change to input */}\n                </div>\n              </form>\n            );\n    }\n\nexport default Form;","import React from \"react\";\n\nconst Usertime = (props) => {\n  console.log(props);\n  return (\n    <main>\n     <h1>{props.userTime}</h1>\n    </main>\n  );\n}\n\nexport default Usertime;\n","import React, { Component } from 'react';\nimport axios from 'axios'\n\n// import components\nimport Form from './Form';\nimport Usertime from './Usertime';\n\n\n// First, we get the date for the user of when they would like to run.\n// Then, we ask if they'd like to hit the sunrise or the sunset. \n// From there we save the values for the time that either the sunrise ends or sunset ends, depending on the user selection. \n// Then, we ask them for the desired duration of their run and save that value. \n// Then, we subtract that duration from either the sunrise or sunset time (depending on what they chose) to figure out when they should leave to go on their run.\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      apiTimes: [], \n      beforeSunrise: null,\n      date: '',\n      duration: 0,\n      userTime:[],\n      morningRun: '',\n      nightRun: '',\n    }\n  }\n\n  handleSunrise = (event) => {\n    const beforeSunrise = event.target.value === 'true' ? true : false;\n    this.setState({\n      beforeSunrise\n    })\n  }\n\n  handleDate = (event) => {\n    this.setState({\n      date: event.target.value,\n    })\n  }\n\n  handleDuration = (event) => {\n    this.setState({\n      duration: event.target.value,\n    })\n  }\n\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    axios({\n      url: `https://api.sunrise-sunset.org/json`,\n      method: `GET`,\n      responseType: `json`,\n      params: {\n        lat: 43.6532,\n        lng: -79.3832,\n        date: this.state.date,\n        \n      }\n    })\n      .then((response) => {\n        this.setState({\n          apiTimes: response.data.results\n        },() => this.createRun() )\n        // anon function above delays createRun until api is finished\n      });\n  }\n\n  //split into three functions and pass the params to the createRun\n  dateConverter = (date) => {\n  // converts user selected date into number values\n    const dateString = date.split(\"-\", 3)\n    //map to new array\n    return dateString.map((date) => {\n      return parseInt(date)\n    })\n  }\n   // converts sunrise time\n  sunriseTimeConverter = () => {\n    // converts the sunrise time from API - from string to number values\n    const sunriseStringOne = this.state.apiTimes.sunrise.split(':', 3)\n    const seconds = sunriseStringOne[2].split(\" \", 1)\n    const sunriseStringThree = sunriseStringOne.pop()\n    // concat the two arrays together with out AM/PM values\n    const finalSunriseString = sunriseStringOne.concat(seconds)\n    // convert array into number values\n    const finalSunriseNumber = finalSunriseString.map((sRiseTimes) => {\n      return parseInt(sRiseTimes)\n    })\n    return finalSunriseNumber\n  }\n\n  // convert sunset time\n  sunsetTimeConverter = () => {\n    // coverts sunset time into number values\n    const sunsetStringOne = this.state.apiTimes.sunset.split(':', 3)\n    const secondsTwo = sunsetStringOne[2].split(\" \", 1)\n    const sunsetStringThree = sunsetStringOne.pop()\n    // concat the two arrays together with out AM/PM values\n    const finalSunsetString = sunsetStringOne.concat(secondsTwo)\n    // convert array into number values\n    const finalSunsetNumber = finalSunsetString.map((sunsetTimes) => {\n      return parseInt(sunsetTimes)\n    })\n    return finalSunsetNumber;\n  }\n\n  // this converts the sunrise time to 24 hour time\n  convertTimeFormat = (formattedTime) => {\n    const timeToConvert = [...formattedTime]\n\n    if (timeToConvert[0] === 12) {\n      \n      const newHour = timeToConvert[0] - 12\n      const newTimeToConvert = timeToConvert.shift()\n      \n      const formattedTimeAgain = timeToConvert.unshift(newHour)\n      \n    } else {\n      const sameHour = timeToConvert[0] - 0\n    }\n    //returns to the function in createRun\n    return timeToConvert;\n\n  }\n\n  //this converts the sunset time to EST time\n  timeToEst = (easternTime) => {\n    \n    if (easternTime[3] >= 5) {\n      return easternTime[3] - 4\n    } else {\n      return easternTime[3] + 20\n    } \n    // we want to take out the value easternTime[3] and return it using splice or slice // google ways how to change a single value in an array \n  }\n\n  // create array with final time strings\n  \n\n  // creates user run\n  createRun = () => {\n    // this is the value returned from timeConverter\n    const dateArray = this.dateConverter(this.state.date)\n    // console.log(dateArray)\n    // this the value returned from the sunriseTimeConverter\n    const sunriseTimeArray = this.sunriseTimeConverter()\n    // console.log(sunriseTimeArray)\n    // this is the value returned from the sunsetTimeConverter\n    const sunsetTimeArray = this.sunsetTimeConverter()\n    // console.log(sunsetTimeArray)\n    \n    const formattedSunsetArray = this.convertTimeFormat(sunsetTimeArray)\n\n    const sunsetDateArray = dateArray.concat(formattedSunsetArray)\n    const sunriseDateArray = dateArray.concat(sunriseTimeArray);\n\n\n    const convertedToSunsetEst = this.timeToEst(sunsetDateArray)\n    const convertedToSunriseEst = this.timeToEst(sunriseDateArray)\n    \n    // console.log({convertedToSunsetEst});\n    // console.log({convertedToSunriseEst});\n\n    const sunsetDateArrayFinal = [...sunsetDateArray]\n    sunsetDateArrayFinal[3] = convertedToSunsetEst;\n    // console.log({sunsetDateArrayFinal});\n\n    const sunriseDateArrayFinal = [...sunriseDateArray]\n    sunriseDateArrayFinal[3] = convertedToSunriseEst;\n    // console.log({sunriseDateArrayFinal});\n\n    const sunsetDateObject = new Date(...sunsetDateArrayFinal);\n    console.log({sunsetDateObject})\n\n    const sunriseDateObject = new Date(...sunriseDateArrayFinal)\n    console.log({sunriseDateObject})\n    \n    const runDuration = parseInt(this.state.duration);\n\n      // set variables for Sunset and Sunrise times\n    let morningRun = sunriseDateObject;\n    morningRun.setMinutes(morningRun.getMinutes()-runDuration)\n    console.log(morningRun)\n\n    let nightRun = sunsetDateObject;\n    nightRun.setMinutes(nightRun.getMinutes()-runDuration)\n\n    const morningRunString = morningRun.toTimeString()\n    console.log(morningRunString);\n\n    const nightRunString = nightRun.toTimeString()\n    console.log(nightRunString);\n\n    const finalMorningString = morningRunString.slice(0,8)\n    console.log(finalMorningString);\n\n    const finalNightString = nightRunString.slice(0,8)\n\n    console.log(finalNightString);\n\n      \n    const userRun = this.state.beforeSunrise ? finalMorningString : finalNightString\n    \n    \n\n\n// mapping to the page // \n      this.setState({\n        userTime: userRun\n      })\n      \n    }\n\n  render() {\n    return (\n      <main>\n        <h1>Fun Run</h1>\n        <Form \n          handleSubmit={this.handleSubmit}\n          handleSunrise={this.handleSunrise}\n          handleDate={this.handleDate}\n          date={this.state.date}\n          handleDuration={this.handleDuration}\n          duration={this.state.duration}\n          beforeSunrise={this.state.beforeSunrise}\n          />\n        <Usertime userTime={this.state.userTime}/>\n      </main>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}